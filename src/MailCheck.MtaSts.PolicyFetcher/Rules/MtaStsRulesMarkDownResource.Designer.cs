//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MailCheck.MtaSts.PolicyFetcher.Rules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class MtaStsRulesMarkDownResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal MtaStsRulesMarkDownResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MailCheck.MtaSts.PolicyFetcher.Rules.MtaStsRulesMarkDownResource", typeof(MtaStsRulesMarkDownResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MTA-STS protects against DNS hijacking or denial of service attacks by caching the policy for a long period of time - longer than an attack can be sustained or continue unnoticed. By setting your max age less than two weeks you will not have the full protection against these attacks. Clients should pick up changes daily by checking the version id in the DNS record, so there is no need to configure a lower max age if you are expecting to make changes..
        /// </summary>
        internal static string PolicyMaxAgeIsTooShortEnforceMode {
            get {
                return ResourceManager.GetString("PolicyMaxAgeIsTooShortEnforceMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MTA-STS protects against DNS hijacking or denial of service attacks by caching the policy for a long period of time - longer than an attack can be sustained or continue unnoticed. Google and other providers will ignore a policy completely if it has a max age of less than 24 hours as the RFC suggests the DNS record is checked daily..
        /// </summary>
        internal static string PolicyMaxAgeIsTooShortTestingMode {
            get {
                return ResourceManager.GetString("PolicyMaxAgeIsTooShortTestingMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only an MTA-STS policy of enforce will ensure that emails are delivered to your domain securely.
        ///
        ///When an enforce policy is in place for this domain, a sending email service (to your domain) will disconnect and try a different server or try again later if any of the following are not true:
        ///
        ///- TLS1.2 or greater has been negotiated
        ///- The certificate is chained from a trusted certificate authority and is in date
        ///- The certificate is valid for the mail server hostname
        ///- The mail server hostname matches o [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PolicyNotEnforced {
            get {
                return ResourceManager.GetString("PolicyNotEnforced", resourceCulture);
            }
        }
    }
}
